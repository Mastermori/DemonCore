start: (instruction | _label | directive | variable)*

instruction: direct_instruction | pseudo_instruction
direct_instruction: param_3 | param_2
pseudo_instruction: pseudo_param_2 | pseudo_param_1 | pseudo_param_0

param_3: register_direct_instruction | immediate_direct_instruction | offset_direct_instruction | branch_direct_instruction | shift_direct_instruction
param_2: jump_upper_direct_instruction

pseudo_param_2: pseudo_short_register register "," register
    | pseudo_short_immediate register "," number_short
pseudo_param_1: pseudo_label _label
pseudo_param_0: pseudo_no_args


_label: global_label | local_label
directive: "."(simple_directive | int_directive) //TODO: Add more directives
variable: /\w(\w|\d|_|-)*/":" var_directive
var_directive: var_directive_word | var_directive_ascii | var_directive_int | var_directive_byte

global_label: /\w(\w|\d|_|-)*/":"
local_label: "."/\w(\w|\d|_|-)*/":"

simple_directive: "DATA"
int_directive: "ALIGN" /\d+/

_seperated{x, sep}: x (sep x)*

var_directive_word: ".WORD" var_param_word
var_directive_ascii: ".ASCII" var_param_string
var_directive_int: ".INT" _seperated{var_param_num, ","}
var_directive_byte: ".BYTE" _seperated{_var_params_byte, ","}

_var_params_byte: (var_param_num | var_param_char)
var_param_char: "'"/\w/"'"
var_param_num: /0|-?[1-9]\d*/
var_param_string: /".*"/
var_param_word: VAR_PARAM_WORD_BASE_16 | VAR_PARAM_WORD_BASE_8 | VAR_PARAM_WORD_BASE_2
VAR_PARAM_WORD_BASE_16: /0x0|0x[1-9a-fA-F][0-9a-fA-F]*/
VAR_PARAM_WORD_BASE_8: /00|0[1-7][0-7]*/
VAR_PARAM_WORD_BASE_2: /0b[0-1]*/

// Param formats
register_direct_instruction: r_type register "," register "," register
immediate_direct_instruction: i_type register "," register "," number_short
offset_direct_instruction: (s_type | l_type | jl_type) register "," number_short "(" register ")"
branch_direct_instruction: b_type register "," register "," number_short
shift_direct_instruction: is_type register "," register "," shamt
jump_upper_direct_instruction: ju_type register "," number_long


!pseudo_long_immediate: "bgt"i | "ble"i | "bgtu"i | "bleu"i
!pseudo_short_register: "mv"i | "not"i | "neg"i
!pseudo_short_immediate: "li"i | "la"i | "beqz"i | "bnez"i | "bgez"i | "blez"i | "bgtz"i // braucht mehr als upper immediate
!pseudo_label: "j"i | "call"i  // braucht mehr als upper immediate
!pseudo_no_args: "ret"i | "nop"i

// Mnemonic types
!r_type: "add"i | "sub"i | "xor"i | "or"i | "and"i | "sll"i | "srl"i | "sra"i | "slt"i | "sltu"i
!i_type: "addi"i | "xori"i | "ori"i | "andi"i | "slti"i | "sltiu"i
    //| "ecall"i | "ebreak"i
!is_type: "slli"i | "srli"i | "srai"i
!l_type: "lb"i | "lh"i | "lw"i | "lbu"i | "lhu"i
!s_type: "sb"i | "sh"i | "sw"i
!b_type: "beq"i | "bne"i | "blt"i | "bge"i | "bltu"i | "bgeu"i
!ju_type: "lui"i | "auipc"i | "jal"i
!jl_type: "jalr"i

// Registers
register: always_zero | return_adress | stack_pointer | global_pointer | thread_pointer | frame_pointer
    | temporary | saved_register | function_argument

?!always_zero: "x0" | "zero"
?!return_adress: "x1" | "ra"
?!stack_pointer: "x2" | "sp"
?!global_pointer: "x3" | "gp"
?!thread_pointer: "x4" | "tp"
?!frame_pointer: "fp"
?!temporary: "x5" | "t0" | "x6" | "t1" | "x7" | "t2" | "x28" | "t3" | "x29"
    | "t4" | "x30" | "t5" | "x31" | "t6"
?!saved_register: "x8" | "s0" | "x9" | "s1" | "x18" | "s2" | "x19"
    | "s3" | "x20" | "s4" | "x21" | "s5" | "x22" | "s6" | "x23" | "s7"
    | "x24" | "s8" | "x25" | "s9" | "x26" | "s10" | "x27" | "s11"
?!function_argument: "x10" | "a0" | "x11" | "a1" | "x12" | "a2" | "x13"
    | "a3" | "x14" | "a4" | "x15" | "a5" | "x16" | "a6" | "x17" | "a7"

// Immediates
?shamt: SHAMT_BASE_10 | SHAMT_BASE_16 | SHAMT_BASE_8 | SHAMT_BASE_2
?number_short: IMM12_BASE_10 | IMM12_BASE_16 | IMM12_BASE_8 | IMM12_BASE_2
?number_long: IMM20_BASE_10 | IMM20_BASE_16 | IMM20_BASE_8 | IMM20_BASE_2

IMM12_BASE_10: /(-[1-9]|-204[0-8]|-?[1-9][0-9]{1,2}|-?1[0-9][0-9][0-9]|-?20[0-3][0-9]|[0-9]|204[0-7])\b/
IMM12_BASE_16: /(0x[1-9a-fA-F][0-9a-fA-F]|0x[1-7][0-9a-fA-F]{2}|0x[0-9a-fA-F])\b/
IMM12_BASE_8: /(0[1-7][0-7]{1,2}|0[0-7]|0[12][0-7]{3}|03[0-6][0-7]{2}|037[0-6][0-7]|0377[0-7])\b/
IMM12_BASE_2: /(0b[0-1]{1,12})\b/

IMM20_BASE_10: /(-[1-9]|-52428[0-8]|-?[1-9]\d{1,4}|-?[1-4]\d{5}|-?5[01]\d{4}|-?52[0-3]\d{3}|-?524[01]\d{2}|-?5242[0-7]\d|\d|52428[0-7])\b/
IMM20_BASE_16: /(0x[1-9a-fA-F][0-9a-fA-F]{1,3}|0x[1-7][0-9a-fA-F]{4}|0x[0-9a-fA-F])\b/
IMM20_BASE_8: /(0[1-7][0-7]{1,5}|0[0-7]|01[0-6][0-7]{5}|017[0-6][0-7]{4}|0177[0-6][0-7]{3}|01777[0-6][0-7]{2}|017777[0-6][0-7]|0177777[0-7])\b/
IMM20_BASE_2: /(0b[0-1]{1,20})\b/

SHAMT_BASE_10: /([0-9]|[12][0-9]|3[01])\b/
SHAMT_BASE_16: /(0x[0-9a-fA-F]|0x1?[0-9a-fA-F])\b/
SHAMT_BASE_8: /(0[0-7]|0[123][0-7]|03[0-7])\b/
SHAMT_BASE_2: /(0b[0-1]{1,5})\b/

// CHARACTERS:
// SHAMT: Bei RV32I shamt[5] = 0

%import common.WORD   // imports from terminal library
%import common.NEWLINE
%import common.WS
%ignore WS           // Disregard whitespace in text
COMMENT: "//" /(.)+/
%ignore COMMENT